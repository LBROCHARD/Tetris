@page "/game"
@inject NavigationManager NavigationManager
@using System.Threading;

@{
    StartRoundDelay();
}

@if(SourceCode.Game.isEnd) {
    <div class="game-over">
        <h2>Game over !</h2>
    </div>
}

<div class="pageGame">
    <div class="back">
            <button class="backButon" @onclick="NavigateToHome"> &lt Back </button>
    </div>
    <div class="container">
        <div class="element-grid-score">
            <table>
                <tbody>
                    @foreach(var line in gridPrintable) {
                        <tr>
                            @foreach(var c in line) {
                                <td id="c-@c">
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <div class="right-element">
                <div class="next-piece">
                    <h2>NEXT</h2>
                    <table class="next-piece-grid">
                        <tbody>
                            @for(int i = 0; i < 4; i++) {
                                <tr>
                                    @for(int j = 0; j < 4; j++) {
                                        <td>          
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="score">
                    <h2>SCORE</h2>
                    <h2>@SourceCode.Game.score.score</h2>
                </div>
            </div>            
        </div>
        <div class="button-game">
            <button class="btn-dir to-left" @onclick="() => SourceCode.Game.grid.actualPiece.ToSide(-1)">
                <img src="images/button-left-bigger.png">
            </button>
            <button class="btn-dir to-right" @onclick="() => SourceCode.Game.grid.actualPiece.ToSide(1)">
                <img src="images/button-right-bigger.png">
            </button>
            <button class="btn-dir to-soft-drop" @onmousedown="() => SourceCode.Game.grid.actualPiece.Drop(100)" @onmouseup="() => SourceCode.Game.grid.actualPiece.Drop(1000)">
                <img src="images/button-right-bigger.png" style="transform: rotate(90deg);">
            </button>
            <button class="btn-dir to-hard-drop" @onclick="() => SourceCode.Game.grid.actualPiece.Drop(0)">
                <img src="images/button-hard-drop-bigger.png">
            </button>
            <button class="btn-dir btn-turn" @onclick="() => SourceCode.Game.grid.actualPiece.TurnPiece()">
                <img class="btn-turn" src="images/button-turn-clockwise-bigger.png">
            </button>
        </div>
            
    </div>
</div>




@code {

    private static List<List<int>> gridPrintable = SourceCode.Game.grid.pieces;
    
    private void NavigateToHome() { NavigationManager.NavigateTo("/"); }

    void StartRoundDelay()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            gridPrintable = SourceCode.Game.grid.pieces;

            InvokeAsync(() =>
            {
                StateHasChanged();
            });


        }), null, SourceCode.Game.delay, SourceCode.Game.delay);
    }
}
